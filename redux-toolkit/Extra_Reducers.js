Redux Toolkit is a toolset that helps to simplify common Redux use cases. It provides functions to handle store setup, state setup, and reducer writing. One of the features provided by Redux Toolkit is extraReducers which can be used in the creation of slices.

A slice in Redux Toolkit represents a portion of the Redux store and the logic that updates that portion. It includes a reducer function, action creators, and action types related to a specific feature of the application. The createSlice function generates these pieces of code automatically redux-toolkit.js.org, freecodecamp.org.

The reducers property in the createSlice function both creates an action creator function and responds to that action in the slice reducer. The extraReducers allows you to respond to an action in your slice reducer but does not create an action creator function. You would use extraReducers when you are dealing with an action that you have already defined somewhere else. The most common examples are responding to a createAsyncThunk action and responding to an action from another slice stackoverflow.com.

Here is an example of using extraReducers:

import { createSlice } from '@reduxjs/toolkit';

const counterSlice = createSlice({
  name: 'counter',
  initialState: 0,
  reducers: {
    increment: (state) => state + 1,
    decrement: (state) => state - 1,
  },
  extraReducers: (builder) => {
    builder
      .addCase(someAction, (state, action) => {
        // Handle the additional action
      })
      .addCase(anotherAction, (state, action) => {
        // Handle another additional action
      });
  },
});

export const { increment, decrement } = counterSlice.actions;
export default counterSlice.reducer;
In the above example, someAction and anotherAction are actions that are defined elsewhere in the application. The extraReducers property uses a builder callback function to add more cases to the reducer, which respond to these other actions stackoverflow.com.

Also, extraReducers can be used to handle actions created by createAsyncThunk:

const fetchUserById = createAsyncThunk(
  'users/fetchByIdStatus',
  async (userId, thunkAPI) => {
    const response = await userAPI.fetchById(userId)
    return response.data
  }
)

const usersSlice = createSlice({
  name:'users',
  initialState: { users: [], loading: false },
  reducers: {},
  extraReducers: (builder) => {
    builder.addCase(fetchUserById.pending, (state, action) => {
      state.loading=true;
    })
    .addCase(fetchUserById.fulfilled, (state, action) => {
      state.loading=false;
      state.users = action.payload;
    })
    .addCase(fetchUserById.rejected, (state, action) => {
      state.loading=false;
    })
  }
});
In this example, fetchUserById is a thunk action creator generated by createAsyncThunk. The extraReducers property in the usersSlice handles the pending, fulfilled and rejected actions dispatched by the fetchUserById thunk stackoverflow.com.

Remember that extraReducers does not generate actions, it only handles actions. If you want to generate actions and handle them in the same slice, use the reducers property redux-toolkit.js.org, stackoverflow.com.
